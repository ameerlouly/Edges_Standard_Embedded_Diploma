
Exercise1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003f0  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006a8  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 57 00 	call	0xae	; 0xae <main>
  64:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Timer0_Delay>:
 * For System Clock=1Mhz and timer prescaler is F_CPU/1024.
 * Timer frequency will be around 1Khz, Ttimer = 1ms
 * For initial timer counter = 0, overflow will occur every 256ms (0 --> 255 --> 0)
 */
void Timer0_Delay(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0; // Set Timer0 initial value to 0
  74:	e2 e5       	ldi	r30, 0x52	; 82
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	10 82       	st	Z, r1
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
  7a:	e3 e5       	ldi	r30, 0x53	; 83
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	85 e8       	ldi	r24, 0x85	; 133
  80:	80 83       	st	Z, r24

	while(!(TIFR & (1<<TOV0))); // Wait until the Timer0 Overflow occurs (wait until TOV0 = 1)
  82:	e8 e5       	ldi	r30, 0x58	; 88
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	88 2f       	mov	r24, r24
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	81 70       	andi	r24, 0x01	; 1
  8e:	90 70       	andi	r25, 0x00	; 0
  90:	00 97       	sbiw	r24, 0x00	; 0
  92:	b9 f3       	breq	.-18     	; 0x82 <Timer0_Delay+0x16>

	TIFR |= (1<<TOV0); // Clear TOV0 bit by set its value
  94:	a8 e5       	ldi	r26, 0x58	; 88
  96:	b0 e0       	ldi	r27, 0x00	; 0
  98:	e8 e5       	ldi	r30, 0x58	; 88
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	8c 93       	st	X, r24

	TCCR0 = 0; // Stop Timer0 by clear the Clock bits (CS00, CS01 and CS02)
  a2:	e3 e5       	ldi	r30, 0x53	; 83
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
}
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

000000ae <main>:

int main(void)
{
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	0f 92       	push	r0
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
	unsigned char count = 0;
  b8:	19 82       	std	Y+1, r1	; 0x01
	DDRC  |= (1<<PC0);  // Configure the led pin as output pin.
  ba:	a4 e3       	ldi	r26, 0x34	; 52
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e4 e3       	ldi	r30, 0x34	; 52
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	8c 93       	st	X, r24
	PORTC &= ~(1<<PC0); // LED is OFF at the beginning (Positive Logic).
  c8:	a5 e3       	ldi	r26, 0x35	; 53
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e5 e3       	ldi	r30, 0x35	; 53
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8e 7f       	andi	r24, 0xFE	; 254
  d4:	8c 93       	st	X, r24

    while(1)
    {
    	PORTC |= (1<<PC0); // LED is ON
  d6:	a5 e3       	ldi	r26, 0x35	; 53
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	e5 e3       	ldi	r30, 0x35	; 53
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	8c 93       	st	X, r24

    	// Wait for half second
    	for(count = 0; count < 2; count++)
  e4:	19 82       	std	Y+1, r1	; 0x01
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <main+0x44>
    	{
    		Timer0_Delay();
  e8:	0e 94 36 00 	call	0x6c	; 0x6c <Timer0_Delay>
    while(1)
    {
    	PORTC |= (1<<PC0); // LED is ON

    	// Wait for half second
    	for(count = 0; count < 2; count++)
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	89 83       	std	Y+1, r24	; 0x01
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	c0 f3       	brcs	.-16     	; 0xe8 <main+0x3a>
    	{
    		Timer0_Delay();
    	}

    	PORTC &= ~(1<<PC0); // LED is OFF
  f8:	a5 e3       	ldi	r26, 0x35	; 53
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	e5 e3       	ldi	r30, 0x35	; 53
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	8c 93       	st	X, r24

    	// Wait for half second
    	for(count = 0; count < 2; count++)
 106:	19 82       	std	Y+1, r1	; 0x01
 108:	05 c0       	rjmp	.+10     	; 0x114 <main+0x66>
    	{
    		Timer0_Delay();
 10a:	0e 94 36 00 	call	0x6c	; 0x6c <Timer0_Delay>
    	}

    	PORTC &= ~(1<<PC0); // LED is OFF

    	// Wait for half second
    	for(count = 0; count < 2; count++)
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	c0 f3       	brcs	.-16     	; 0x10a <main+0x5c>
 11a:	dd cf       	rjmp	.-70     	; 0xd6 <main+0x28>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
